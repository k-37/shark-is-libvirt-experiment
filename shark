#!/usr/bin/env bash

set -o errexit -o errtrace -o nounset -o pipefail

# Global variable names begin with double underscore.
__project_path="$PWD"
__vm_config_file_name='Sharkfile'
__vm_config_file_path="${__project_path}/${__vm_config_file_name}"
__vm_default_name="$(basename ${__project_path})"
__default_cloud_image_path='/tmp/debian-12-genericcloud-amd64-20241004-1890.qcow2'
__default_cloud_image_format='qcow2'
__default_user_name='admin'
__default_user_password='admin'

error_message_and_exit() {
    set_text_color 'red'
    echo "Error: ${1}" >&2
    set_text_color 'restore'

    exit 1
}

info_message() {
    set_text_color 'blue'
    echo "Info: ${1}"
    set_text_color 'restore'
}

set_text_color() {
    if [[ 'red' == ${1} ]]; then
        echo -e "\\x1b[31m" 1>&2
    elif [[ 'blue' == ${1} ]]; then
        echo -e "\\x1b[34m" 1>&2
    elif [[ 'restore' == ${1} ]]; then
        echo -e "\\x1b[0m" 1>&2
    else
        echo "Text color '${1}' is not supported." >&2

        exit 1
    fi
}

ask_confirmation() {
    local question

    question=''
    [[ ! -z ${1:-} ]] && question="${1}"
    [[ '' = ${question} ]] && error_message_and_exit "Question must be defined (first argument)."

    read -p "${question} ([Y]es or [N]o): "
    case $(echo $REPLY | tr '[A-Z]' '[a-z]') in
        y|yes) echo 'yes' ;;
        *) echo 'no' ;;
    esac
}

__action=''
[[ ! -z ${1:-} ]] && __action="${1}"
[[ '' = ${__action} ]] && error_message_and_exit "Action must be defined (first argument). Try using 'init' action which will create config files for VM in the current directory."

init() {
    [[ -f ${__vm_config_file_path} ]] \
        && error_message_and_exit "File '${__vm_config_file_path}' already exists."

    cat <<- EOF > "${__vm_config_file_path}"
		#!/usr/bin/env bash

		################################################
		### Options in this section MUST be verified ###
		################################################

		__original_cloud_image_path='${__default_cloud_image_path}'
		__original_cloud_image_format='${__default_cloud_image_format}'

		# VM name should be unique across all VMs on the current host.
		__vm_name='${__vm_default_name}'

		##################################################
		### This section is optional for configuration ###
		##################################################

		__vm_disk_image_directory='/var/lib/libvirt/images'
		__vm_disk_image_file_path="\${__vm_disk_image_directory}/\${__vm_name}.\${__original_cloud_image_format}"
		__vm_memory=1024
		__vm_vcpus=1
		__vm_disk="'\${__vm_disk_image_file_path}'"
		__vm_disk_size=4G
		__vm_network='default,model=virtio'
		__vm_cloud_init='user-data=user-data'
		__libvirt_default_uri='qemu:///system'
		__virt_install_command="virt-install --connect '\${__libvirt_default_uri}' --import --osinfo detect=on,require=off --name '\${__vm_name}' --memory '\${__vm_memory}' --vcpus '\${__vm_vcpus}' --disk '\${__vm_disk}' --network '\${__vm_network}' --cloud-init '\${__vm_cloud_init}'"
	EOF

    [[ -f './user-data' ]] \
        && error_message_and_exit "File '${__project_path}/user-data' already exists."

    cat <<- EOF > './user-data'
		#cloud-config

		hostname: ${__vm_default_name}
		create_hostname_file: true

		users:
		- name: ${__default_user_name}
		  plain_text_passwd: ${__default_user_password}
		  lock_passwd: false
		  groups: sudo
	EOF

    info_message "Initialization is done. Edit files in '${__project_path}' before starting VM with 'up' action."
}

load_and_verify_vm_config() {
    [[ ! -f ${__vm_config_file_path} ]] \
        && error_message_and_exit "File '${__vm_config_file_path}' is not found. Use 'init' action to create one."
    source "${__vm_config_file_path}"

    [[ ! -f ${__original_cloud_image_path} ]] \
        && error_message_and_exit "File '${__original_cloud_image_path}' is not found, it is defined as original cloud image in '${__vm_config_file_path}'."

    [[ -z ${__original_cloud_image_format} ]] \
        && error_message_and_exit "Cloud image format is not defined in '${__vm_config_file_path}'."

    [[ -z ${__vm_name} ]] \
        && error_message_and_exit "Name for VM is not defined in '${__vm_config_file_path}'."

    export LIBVIRT_DEFAULT_URI="${__libvirt_default_uri}"

    info_message "VM configuration is valid."
}

up() {
    local volume_name

    load_and_verify_vm_config

    volume_name="${__vm_name}.${__original_cloud_image_format}"

    if [[ ! $(virsh list --all | grep " ${__vm_name} ") ]]; then
        virsh vol-create-as default \
            "${volume_name}" \
            "10M" \
            --format "${__original_cloud_image_format}"
        virsh vol-upload --pool default "${volume_name}" "${__original_cloud_image_path}"
        virsh vol-resize "${volume_name}" --pool default --capacity "${__vm_disk_size}"

        eval "${__virt_install_command}"
    else
        virsh start "${__vm_name}"
    fi
}

down() {
    load_and_verify_vm_config

    virsh shutdown "${__vm_name}"
}

destroy() {
    load_and_verify_vm_config

    [[ 'yes' != $(ask_confirmation "Destroy VM '${__vm_name}' and its storage?") ]] \
        && info_message 'Not destroyed.' && exit 0

    virsh destroy "${__vm_name}" || true
    virsh undefine "${__vm_name}" --remove-all-storage || true
}

main() {
    if [[ 'init' == ${__action} ]]; then
        init
    elif [[ 'up' == ${__action} ]]; then
        up
    elif [[ 'down' == ${__action} ]]; then
        down
    elif [[ 'destroy' == ${__action} ]]; then
        destroy
    else
        error_message_and_exit "Action '${__action}' is not supported."
    fi
}

main "$@"
exit
